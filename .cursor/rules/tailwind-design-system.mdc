---
alwaysApply: false
---
# Tailwind CSS Design System & Styling

## Design Token Architecture

### 1. CSS Custom Properties (Design Tokens)
```css
/* src/lib/styles/tokens.css */
:root {
  /* Colors */
  --color-primary-50: #eff6ff;
  --color-primary-500: #3b82f6;
  --color-primary-900: #1e3a8a;
  
  /* Typography */
  --font-size-xs: 0.75rem;
  --font-size-sm: 0.875rem;
  --font-size-base: 1rem;
  --font-size-lg: 1.125rem;
  --font-size-xl: 1.25rem;
  --font-size-2xl: 1.5rem;
  --font-size-3xl: 1.875rem;
  --font-size-4xl: 2.25rem;
  
  /* Spacing */
  --spacing-xs: 0.25rem;
  --spacing-sm: 0.5rem;
  --spacing-md: 1rem;
  --spacing-lg: 1.5rem;
  --spacing-xl: 2rem;
  --spacing-2xl: 3rem;
  
  /* Shadows */
  --shadow-sm: 0 1px 2px 0 rgb(0 0 0 / 0.05);
  --shadow-md: 0 4px 6px -1px rgb(0 0 0 / 0.1);
  --shadow-lg: 0 10px 15px -3px rgb(0 0 0 / 0.1);
  
  /* Border Radius */
  --radius-sm: 0.25rem;
  --radius-md: 0.375rem;
  --radius-lg: 0.5rem;
  --radius-xl: 0.75rem;
}
```

### 2. TypeScript Design Tokens
```typescript
// src/lib/styles/tokens.ts
export const tokens = {
  colors: {
    primary: {
      50: '#eff6ff',
      500: '#3b82f6',
      900: '#1e3a8a'
    },
    gray: {
      50: '#f9fafb',
      100: '#f3f4f6',
      500: '#6b7280',
      900: '#111827'
    }
  },
  spacing: {
    xs: '0.25rem',
    sm: '0.5rem',
    md: '1rem',
    lg: '1.5rem',
    xl: '2rem',
    '2xl': '3rem'
  },
  typography: {
    fontSizes: {
      xs: '0.75rem',
      sm: '0.875rem',
      base: '1rem',
      lg: '1.125rem',
      xl: '1.25rem',
      '2xl': '1.5rem',
      '3xl': '1.875rem',
      '4xl': '2.25rem'
    },
    fontWeights: {
      normal: '400',
      medium: '500',
      semibold: '600',
      bold: '700'
    }
  }
} as const;
```

## Tailwind Configuration

### 1. Extended Theme Configuration
```typescript
// tailwind.config.ts
import type { Config } from 'tailwindcss';

export default {
  content: ['./src/**/*.{html,js,svelte,ts}'],
  theme: {
    extend: {
      colors: {
        primary: {
          50: 'var(--color-primary-50)',
          500: 'var(--color-primary-500)',
          900: 'var(--color-primary-900)'
        }
      },
      fontFamily: {
        sans: ['Inter', 'system-ui', 'sans-serif'],
        mono: ['JetBrains Mono', 'monospace']
      },
      spacing: {
        '18': '4.5rem',
        '88': '22rem'
      },
      animation: {
        'fade-in': 'fadeIn 0.5s ease-in-out',
        'slide-up': 'slideUp 0.3s ease-out',
        'bounce-gentle': 'bounceGentle 2s infinite'
      },
      keyframes: {
        fadeIn: {
          '0%': { opacity: '0' },
          '100%': { opacity: '1' }
        },
        slideUp: {
          '0%': { transform: 'translateY(20px)', opacity: '0' },
          '100%': { transform: 'translateY(0)', opacity: '1' }
        },
        bounceGentle: {
          '0%, 100%': { transform: 'translateY(0)' },
          '50%': { transform: 'translateY(-10px)' }
        }
      }
    }
  },
  plugins: []
} satisfies Config;
```

## Component Styling Patterns

### 1. Utility-First Approach
```svelte
<!-- Good: Utility classes with clear hierarchy -->
<div class="bg-white rounded-lg shadow-md p-6 hover:shadow-lg transition-shadow">
  <h3 class="text-xl font-semibold text-gray-900 mb-2">Card Title</h3>
  <p class="text-gray-600 leading-relaxed">Card content goes here</p>
</div>

<!-- Avoid: Custom CSS when utilities exist -->
<div class="custom-card">
  <h3 class="custom-title">Card Title</h3>
  <p class="custom-content">Card content goes here</p>
</div>
```

### 2. Responsive Design Patterns
```svelte
<!-- Mobile-first responsive design -->
<div class="
  grid 
  grid-cols-1 
  md:grid-cols-2 
  lg:grid-cols-3 
  gap-4 
  md:gap-6 
  lg:gap-8
">
  <!-- Grid items -->
</div>

<!-- Typography scaling -->
<h1 class="
  text-3xl 
  md:text-4xl 
  lg:text-5xl 
  xl:text-6xl
  font-bold 
  leading-tight
">
  Responsive Heading
</h1>
```

### 3. Component Variants with Classes
```svelte
<script lang="ts">
  interface ButtonProps {
    variant?: 'primary' | 'secondary' | 'ghost';
    size?: 'sm' | 'md' | 'lg';
    disabled?: boolean;
  }
  
  let { 
    variant = 'primary', 
    size = 'md', 
    disabled = false,
    ...restProps 
  }: ButtonProps = $props();
  
  const baseClasses = 'inline-flex items-center justify-center font-medium rounded-md transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2';
  
  const variantClasses = {
    primary: 'bg-primary-500 text-white hover:bg-primary-600 focus:ring-primary-500',
    secondary: 'bg-gray-200 text-gray-900 hover:bg-gray-300 focus:ring-gray-500',
    ghost: 'text-primary-500 hover:bg-primary-50 focus:ring-primary-500'
  };
  
  const sizeClasses = {
    sm: 'px-3 py-1.5 text-sm',
    md: 'px-4 py-2 text-base',
    lg: 'px-6 py-3 text-lg'
  };
  
  const disabledClasses = disabled ? 'opacity-50 cursor-not-allowed' : '';
  
  $: classes = `${baseClasses} ${variantClasses[variant]} ${sizeClasses[size]} ${disabledClasses}`;
</script>

<button 
  class={classes}
  {disabled}
  {...restProps}
>
  <slot />
</button>
```

## Animation & Interaction Patterns

### 1. Micro-interactions
```svelte
<script>
  import { onMount } from 'svelte';
  
  let isVisible = $state(false);
  let element: HTMLElement;
  
  onMount(() => {
    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            isVisible = true;
          }
        });
      },
      { threshold: 0.1 }
    );
    
    if (element) {
      observer.observe(element);
    }
    
    return () => observer.disconnect();
  });
</script>

<div 
  bind:this={element}
  class="
    transition-all 
    duration-500 
    ease-out
    {isVisible ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-8'}
  "
>
  Animated content
</div>
```

### 2. Hover Effects
```svelte
<div class="
  group 
  relative 
  overflow-hidden 
  rounded-lg 
  bg-white 
  shadow-md 
  transition-all 
  duration-300 
  hover:shadow-xl 
  hover:-translate-y-1
">
  <div class="
    absolute 
    inset-0 
    bg-gradient-to-r 
    from-primary-500 
    to-primary-600 
    opacity-0 
    transition-opacity 
    duration-300 
    group-hover:opacity-10
  "></div>
  
  <div class="relative p-6">
    <h3 class="text-xl font-semibold mb-2">Card Title</h3>
    <p class="text-gray-600">Card content</p>
  </div>
</div>
```

## Dark Mode Implementation

### 1. CSS Variables for Dark Mode
```css
/* src/lib/styles/globals.css */
:root {
  --bg-primary: #ffffff;
  --bg-secondary: #f9fafb;
  --text-primary: #111827;
  --text-secondary: #6b7280;
  --border-color: #e5e7eb;
}

.dark {
  --bg-primary: #111827;
  --bg-secondary: #1f2937;
  --text-primary: #f9fafb;
  --text-secondary: #d1d5db;
  --border-color: #374151;
}
```

### 2. Dark Mode Classes
```svelte
<div class="
  bg-white 
  dark:bg-gray-900 
  text-gray-900 
  dark:text-white
  border 
  border-gray-200 
  dark:border-gray-700
">
  Content that adapts to dark mode
</div>
```

## Performance Optimization

### 1. CSS Purging
```typescript
// tailwind.config.ts
export default {
  content: [
    './src/**/*.{html,js,svelte,ts}',
    './src/**/*.svelte'
  ],
  // Ensure all used classes are included
  safelist: [
    'animate-fade-in',
    'animate-slide-up',
    'bg-primary-500',
    'text-primary-500'
  ]
} satisfies Config;
```

### 2. Critical CSS
```svelte
<!-- src/app.html -->
<head>
  <style>
    /* Critical above-the-fold styles */
    .hero {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      min-height: 100vh;
    }
  </style>
</head>
```

## Accessibility in Styling

### 1. Focus States
```svelte
<button class="
  px-4 
  py-2 
  bg-primary-500 
  text-white 
  rounded-md
  focus:outline-none 
  focus:ring-2 
  focus:ring-primary-500 
  focus:ring-offset-2
  hover:bg-primary-600
  active:bg-primary-700
">
  Accessible Button
</button>
```

### 2. High Contrast Support
```svelte
<div class="
  bg-white 
  text-gray-900
  [@media(prefers-contrast:high)]:border-2
  [@media(prefers-contrast:high)]:border-gray-900
">
  High contrast support
</div>
```